// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CompleteProjectProjectsProjectIdCompletePatchData, CompleteProjectProjectsProjectIdCompletePatchErrors, CompleteProjectProjectsProjectIdCompletePatchResponses, CompleteTaskTasksTaskIdCompletePatchData, CompleteTaskTasksTaskIdCompletePatchErrors, CompleteTaskTasksTaskIdCompletePatchResponses, CreateProjectProjectsPostData, CreateProjectProjectsPostErrors, CreateProjectProjectsPostResponses, CreateTaskTasksPostData, CreateTaskTasksPostErrors, CreateTaskTasksPostResponses, DeleteProjectProjectsProjectIdDeleteData, DeleteProjectProjectsProjectIdDeleteErrors, DeleteProjectProjectsProjectIdDeleteResponses, DeleteTaskTasksTaskIdDeleteData, DeleteTaskTasksTaskIdDeleteErrors, DeleteTaskTasksTaskIdDeleteResponses, GetAllProjectsProjectsGetData, GetAllProjectsProjectsGetResponses, GetAllTasksTasksGetData, GetAllTasksTasksGetResponses, GetProjectProjectsProjectIdGetData, GetProjectProjectsProjectIdGetErrors, GetProjectProjectsProjectIdGetResponses, GetProjectTasksProjectsProjectIdTasksGetData, GetProjectTasksProjectsProjectIdTasksGetErrors, GetProjectTasksProjectsProjectIdTasksGetResponses, GetTaskTasksTaskIdGetData, GetTaskTasksTaskIdGetErrors, GetTaskTasksTaskIdGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses, LinkTaskToProjectProjectsProjectIdTasksTaskIdLinkPostData, LinkTaskToProjectProjectsProjectIdTasksTaskIdLinkPostErrors, LinkTaskToProjectProjectsProjectIdTasksTaskIdLinkPostResponses, RootGetData, RootGetResponses, UnlinkTaskFromProjectProjectsProjectIdTasksTaskIdUnlinkDeleteData, UnlinkTaskFromProjectProjectsProjectIdTasksTaskIdUnlinkDeleteErrors, UnlinkTaskFromProjectProjectsProjectIdTasksTaskIdUnlinkDeleteResponses, UpdateProjectProjectsProjectIdPutData, UpdateProjectProjectsProjectIdPutErrors, UpdateProjectProjectsProjectIdPutResponses, UpdateTaskTasksTaskIdPutData, UpdateTaskTasksTaskIdPutErrors, UpdateTaskTasksTaskIdPutResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get All Tasks
 */
export const getAllTasksTasksGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllTasksTasksGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllTasksTasksGetResponses, unknown, ThrowOnError>({
        url: '/tasks/',
        ...options
    });
};

/**
 * Create Task
 */
export const createTaskTasksPost = <ThrowOnError extends boolean = false>(options: Options<CreateTaskTasksPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTaskTasksPostResponses, CreateTaskTasksPostErrors, ThrowOnError>({
        url: '/tasks/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Task
 */
export const deleteTaskTasksTaskIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTaskTasksTaskIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTaskTasksTaskIdDeleteResponses, DeleteTaskTasksTaskIdDeleteErrors, ThrowOnError>({
        url: '/tasks/{task_id}',
        ...options
    });
};

/**
 * Get Task
 */
export const getTaskTasksTaskIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTaskTasksTaskIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTaskTasksTaskIdGetResponses, GetTaskTasksTaskIdGetErrors, ThrowOnError>({
        url: '/tasks/{task_id}',
        ...options
    });
};

/**
 * Update Task
 */
export const updateTaskTasksTaskIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskTasksTaskIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTaskTasksTaskIdPutResponses, UpdateTaskTasksTaskIdPutErrors, ThrowOnError>({
        url: '/tasks/{task_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Complete Task
 */
export const completeTaskTasksTaskIdCompletePatch = <ThrowOnError extends boolean = false>(options: Options<CompleteTaskTasksTaskIdCompletePatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<CompleteTaskTasksTaskIdCompletePatchResponses, CompleteTaskTasksTaskIdCompletePatchErrors, ThrowOnError>({
        url: '/tasks/{task_id}/complete',
        ...options
    });
};

/**
 * Get All Projects
 */
export const getAllProjectsProjectsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllProjectsProjectsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllProjectsProjectsGetResponses, unknown, ThrowOnError>({
        url: '/projects/',
        ...options
    });
};

/**
 * Create Project
 */
export const createProjectProjectsPost = <ThrowOnError extends boolean = false>(options: Options<CreateProjectProjectsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateProjectProjectsPostResponses, CreateProjectProjectsPostErrors, ThrowOnError>({
        url: '/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Project
 */
export const deleteProjectProjectsProjectIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectProjectsProjectIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProjectProjectsProjectIdDeleteResponses, DeleteProjectProjectsProjectIdDeleteErrors, ThrowOnError>({
        url: '/projects/{project_id}',
        ...options
    });
};

/**
 * Get Project
 */
export const getProjectProjectsProjectIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProjectProjectsProjectIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectProjectsProjectIdGetResponses, GetProjectProjectsProjectIdGetErrors, ThrowOnError>({
        url: '/projects/{project_id}',
        ...options
    });
};

/**
 * Update Project
 */
export const updateProjectProjectsProjectIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectProjectsProjectIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateProjectProjectsProjectIdPutResponses, UpdateProjectProjectsProjectIdPutErrors, ThrowOnError>({
        url: '/projects/{project_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Project Tasks
 */
export const getProjectTasksProjectsProjectIdTasksGet = <ThrowOnError extends boolean = false>(options: Options<GetProjectTasksProjectsProjectIdTasksGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectTasksProjectsProjectIdTasksGetResponses, GetProjectTasksProjectsProjectIdTasksGetErrors, ThrowOnError>({
        url: '/projects/{project_id}/tasks',
        ...options
    });
};

/**
 * Link Task To Project
 */
export const linkTaskToProjectProjectsProjectIdTasksTaskIdLinkPost = <ThrowOnError extends boolean = false>(options: Options<LinkTaskToProjectProjectsProjectIdTasksTaskIdLinkPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LinkTaskToProjectProjectsProjectIdTasksTaskIdLinkPostResponses, LinkTaskToProjectProjectsProjectIdTasksTaskIdLinkPostErrors, ThrowOnError>({
        url: '/projects/{project_id}/tasks/{task_id}/link',
        ...options
    });
};

/**
 * Unlink Task From Project
 */
export const unlinkTaskFromProjectProjectsProjectIdTasksTaskIdUnlinkDelete = <ThrowOnError extends boolean = false>(options: Options<UnlinkTaskFromProjectProjectsProjectIdTasksTaskIdUnlinkDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<UnlinkTaskFromProjectProjectsProjectIdTasksTaskIdUnlinkDeleteResponses, UnlinkTaskFromProjectProjectsProjectIdTasksTaskIdUnlinkDeleteErrors, ThrowOnError>({
        url: '/projects/{project_id}/tasks/{task_id}/unlink',
        ...options
    });
};

/**
 * Complete Project
 */
export const completeProjectProjectsProjectIdCompletePatch = <ThrowOnError extends boolean = false>(options: Options<CompleteProjectProjectsProjectIdCompletePatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<CompleteProjectProjectsProjectIdCompletePatchResponses, CompleteProjectProjectsProjectIdCompletePatchErrors, ThrowOnError>({
        url: '/projects/{project_id}/complete',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};
